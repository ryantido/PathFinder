generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String
  name        String
  role        Role          @default(USER)
  quizResults QuizResult[]
  favorites   FavoriteJob[]
  settings    Settings?
  jobs        Job[]         @relation("UserJobs")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Quiz {
  id          String       @id @default(uuid())
  title       String
  questions   Question[]
  quizResults QuizResult[]
}

model Question {
  id      String   @id @default(uuid())
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  quizId  String
  text    String
  options Option[]
  weights Weight[]
}

model Option {
  id         String   @id @default(uuid())
  value      String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Weight {
  id         String   @id @default(uuid())
  value      Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model QuizResult {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  answers   Answer[]
  score     Int
  profile   String
  createdAt DateTime @default(now())
}

model Answer {
  id           String     @id @default(uuid())
  value        Int
  quizResult   QuizResult @relation(fields: [quizResultId], references: [id])
  quizResultId String
}

model Job {
  id           String        @id @default(uuid())
  title        String
  description  String
  tags         Tag[]
  location     String
  url          String?
  postedBy     User?         @relation("UserJobs", fields: [postedById], references: [id])
  postedById   String?
  favoriteJobs FavoriteJob[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Tag {
  id    String @id @default(uuid())
  value String
  job   Job    @relation(fields: [jobId], references: [id])
  jobId String
}

model FavoriteJob {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  job    Job    @relation(fields: [jobId], references: [id])
  jobId  String
}

model Settings {
  id          String  @id @default(uuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
  privateMode Boolean @default(false)
  alerts      Alert[]
}

model Alert {
  id         String   @id @default(uuid())
  value      String
  settings   Settings @relation(fields: [settingsId], references: [id])
  settingsId String
}

enum Role {
  USER
  ADMIN
}
